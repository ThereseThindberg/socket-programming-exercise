import socket

def create_socket():
    return socket.socket(socket.AF_INET, socket.SOCK_STREAM)

#associate socket with address of server
def bind_socket(sock,host,port):
    sock.bind((host,port))


def listen_for_connection(sock):
    sock.listen()
    #printing ip adress and portnumber of server
    print(f"Server listening on {sock.getsockname()}")  


def accept_connection(sock):
    conn,addr=sock.accept()
    print(f"Connected with {addr}")
    return conn,addr





def close_socket(sock):
    sock.close()


#For handeling commands in different versions
def handle_command(command:str):
    """
    Support verion, echo, and basic calculator commands
    """

    parts = command.strip().split(" ", 1)
    if not parts:
        return "Error:No command received"
    cmd=parts[0].lower()

    if len(parts)>1:
        args = parts[1]
    else:
        args=""
    if cmd=="version":
            return "TCP calculator v1.0"
    elif cmd=="echo":
        if args:
            return args
        else:
            return "warning:missing message"
    elif cmd=="add":
        return handle_add(args)
    elif cmd=="sub":
        return handle_sub(args)
    elif cmd=="mul":
        return handle_mul(args)
    elif cmd=="div":
        return handle_div(args)
    elif cmd=="help":
        return (
            "Supported commands: \n"
            "-quit\n"
            "-version\n"
            "-echo\n"
            "-basic calculator commands\n"
            "-help\n"
        )
    else:
        return "Error:Unknown command"
    
def handle_add(args):
    try:
        number=args.split()
        if len(number)!=2:
            return "Error:Expected 2 arguments"
        x=int(number[0])
        y=int(number[1])
        result=x+y
        return str(result)
    except:
        return "Error:Invalid argements"
    
def handle_sub(args):
    try:
        number=args.split()
        if len(number)!=2:
            return "Error:Expected 2 arguments"
        x=int(number[0])
        y=int(number[1])
        result=x-y
        return str(result)
    except:
        return "Error:Invalid argements"

def handle_mul(args):
    try:
        number=args.split()
        if len(number)!=2:
            return "Error:Expected 2 arguments"
        x=int(number[0])
        y=int(number[1])
        result=x*y
        return str(result)
    except:
        return "Error:Invalid argements"
    
def handle_div(args):
    try:
        number=args.split()
        if len(number)!=2:
            return "Error:Expected 2 arguments"
        x=int(number[0])
        y=int(number[1])
        result=x/y
        return str(result)
    except:
        return "Error:Invalid argements"
    
    
#Communicate with the client
def handle_client(conn):
    try:
        while True:
            data=conn.recv(1024)
            if not data:
                break
            command = data.decode()
            result = handle_command(command)
            conn.sendall(result.encode())
    except Exception as e:
        print("Error during client communication:", e)

    
def main():
        host = '127.0.0.1'
        port=65432
        server_socket=create_socket()
        try: 
            bind_socket(server_socket,host,port)
            listen_for_connection(server_socket)
            conn,addr=accept_connection(server_socket)
            handle_client(conn)
        except Exception as e:
            print("Server error:", e)
        finally:
            close_socket(server_socket)

if __name__ =="__main__":
    main()

        


